@model PlayListModel

<p>@Model.PlayListName</p>

<div class="player-container">

    <div id="player"></div>


    <div class="playlist-list-container">


        @foreach (var item in Model.PlayLists)
        {
            <div class="playlist-item-elem">

                <img src="https://img.youtube.com/vi/@item.ItemId/2.jpg" />

                <a class="playlist-item-a" onclick="javascript:onPlayListItemClick(this);" item-itemLibraryEntityId=@item.ItemLibraryEntityId item-itemId=@item.ItemId item-itemSeq=@item.ItemSeq>
                    <div class="playlist-item-inner-container">
                        <p>
                            <span style="padding-right:.5em;width:8%;color:gray;">@(item.ItemSeq + 1)</span>
                            <span style="width:92%;">@item.Title</span>
                        </p>
                        <span class="playlist-item-playCount">
                            再生回数：<span id="playCount_@item.ItemSeq">@item.PlayCount</span>
                        </span>
                    </div>
                </a>


            </div>
        }
    </div>

</div>


<style>

    .player-container {
        display: flex;
    }

    .playlist-list-container {
        margin-left: 1em;
        height: 70vh;
        overflow-y: auto;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }

    .playlist-item-elem {
        display: flex;
        padding: .5em;
        background-color: rgb(244,244,244);
    }

    .playlist-item-elem {
        display: flex;
        justify-content: left;
        padding: .5em;
        background-color: rgb(244,244,244);
    }

        .playlist-item-elem:hover {
            cursor: pointer;
            background-color: rgb(200, 200, 200);
        }

    .playlist-item-a {
        margin-left: .5em;
        vertical-align: middle;
        display: flex;
        align-items: center;
        color:black;
        text-decoration:none;
    }

    .playlist-item-a:hover{
        color:black;
    }

    .playlist-item-inner-container {
    }

    .playlist-item-playCount{
        font-size:.9em;
        padding:0 .5em 0 .5em;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }


</style>

<script>

    //プレイリスト管理変数
    var playListHeaderId = "@Html.Raw(Model.PlayListHeaderId)";
    var playList = @Html.Raw(Model.PlayListJson);
    var currentIndex = 0;
    var maxIndex = playList.length - 1;

    var player;
    console.log(playList);

    document.onreadystatechange = function() {
        if (document.readyState === 'complete') {
            console.log('document is complete');
            var tag = document.createElement('script');

            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
    }


    function onYouTubeIframeAPIReady() {
        console.log("onYouTubeIframeAPIReady!");

        player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: playList[currentIndex].itemId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        console.log('onPlayerReady');
    }

    function onPlayerStateChange(event) {
        console.log('ステータス変更 : ' + event.data);
        if (event.data == 0) {
            console.log('再生終了');

            console.log("次の動画を再生");
            playNextVideo();

        }
        if (event.data == 3) {
            console.log("バッファリング中...");
        }
        if (event.data == -1) {

            console.log("再生未開始のため、再生開始");
            player.playVideo();
        }
    }

    function playNextVideo() {

        var prevIndex = currentIndex;
        var addCountEntityId = playList[prevIndex].itemLibraryId;

        //再生回数を加算
        addPlayCount(addCountEntityId, prevIndex);

        //インデックスを加算
        if (currentIndex === maxIndex) {
            currentIndex = 0;
        } else {
            currentIndex += 1;
        }


        console.log("currentIndex : " + currentIndex);
        player.loadVideoById(playList[currentIndex].itemId);


    }

    function onPlayListItemClick(sender) {
        console.log("次に再生するID：" + sender.getAttribute("item-itemId"));

        //インデックスを変更
        currentIndex = parseInt(sender.getAttribute("item-itemSeq"));
        player.loadVideoById(sender.getAttribute("item-itemId"));


    }

    /* 指定したアイテムの再生回数を加算します。 */
    function addPlayCount(itemLibrariesEntityId, index) {
        //対象のパラメータで再生回数を増やすAPIを呼び出す
        var req = new XMLHttpRequest();

        req.onreadystatechange = function() {
            if (req.readyState == 4) {
                //通信完了
                if (req.status == 200) {
                    console.log("addPlayCount 200OK");
                    console.log("responseText : " + req.responseText);
                    console.log("parsed : " + JSON.parse(req.responseText));
                    document.getElementById("playCount_" + index).innerText = JSON.parse(req.responseText)["playCount"];

                }
            } else {
                console.log("addPlayCount calling...");
            }
        }

        req.open("GET", "/Player/addPlayCount?itemLibrariesEntityId=" + itemLibrariesEntityId);
        req.send(null);

    }

</script>