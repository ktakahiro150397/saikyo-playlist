@model PlayListModel

<p>@Model.PlayListName</p>

<div class="player-container">

    @*プレイヤー要素*@
    <div class="player-element-container">
        <div id="player"></div>

        <div class="player-control">
            <p>
                音量 : <span id="current-volume-value"></span>%
                <span id="current-mute-status">(ミュート中)</span>
            </p>
            <input type="range" id="volumeControl" class="rangeControl"
                   min="0" max="100" step="1" oninput="onVolumeControlRangeChange();" />
        </div>
    </div>

    @*プレイリスト一覧*@
    <div class="playlist-list-container">


        @foreach (var item in Model.PlayLists)
        {
            <div class="playlist-item-elem">

                <img class="playlist-thumbnail" src="@item.ItemThumbnailUrl" />

                <a class="playlist-item-a" onclick="javascript:onPlayListItemClick(this);" item-itemLibraryEntityId=@item.ItemLibraryEntityId item-itemId=@item.ItemId item-itemSeq=@item.ItemSeq>

                    <div class="playlist-item-inner-container">
                        <p>
                            <span style="padding-right:.5em;width:8%;color:gray;">@(item.ItemSeq + 1)</span>
                            <span style="width:92%;">@item.Title</span>
                        </p>
                        <span class="playlist-item-playCount">
                            再生回数：<span id="playCount_@item.ItemSeq">@item.PlayCount</span>
                        </span>
                    </div>
                </a>


            </div>
        }
    </div>

</div>


<style>

    .player-element-container {
        display: flex;
        flex-wrap: wrap;
        width: 40%;
        align-content: flex-start;
    }

    .player-control {
        margin-top: 10px;
        width: 100%;
    }

    .rangeControl {
        -webkit-appearance: none;
        appearance: none;
        cursor: pointer;
        height: 10px;
        width: 100%;
        /*背景*/
        background: #d3d3d3;
        border: 1px solid #87cefa;
        border-radius: 5px;
    }

        .rangeControl:focus, .rangeControl:active {
            outline: none;
        }

    .player-container {
        display: flex;
    }

    .playlist-list-container {
        margin-left: 1em;
        height: 70vh;
        overflow-y: auto;
        border: 1px solid #ced4da;
        border-radius: 5px;
        width: 60%;
    }

    .playlist-item-elem {
        display: flex;
        padding: .5em;
        background-color: rgb(244,244,244);
    }

    .playlist-item-elem {
        display: flex;
        justify-content: left;
        padding: .5em;
        background-color: rgb(244,244,244);
    }

        .playlist-item-elem:hover {
            cursor: pointer;
            background-color: rgb(200, 200, 200);
        }

    .playlist-item-a {
    @*margin-left: .5em;*@ vertical-align: middle;
        display: flex;
        align-items: center;
        color: black;
        text-decoration: none;
        width: 100%;
    }

        .playlist-item-a:hover {
            color: black;
        }

    .playlist-item-inner-container {
        margin-left: .5em;
    }

    .playlist-item-playCount {
        font-size: .9em;
        padding: 0 .5em 0 .5em;
        border: 1px solid #ced4da;
        border-radius: 5px;
    }

    .playlist-item-playing {
        background-color: rgb(150,150,150);
    }

    .playlist-thumbnail {
        margin: 3px 3px 3px 10px;
        height: 60px;
        border-radius: 3px;
    }
</style>

<script>

    //プレイリスト管理変数
    var playListHeaderId = "@Html.Raw(Model.PlayListHeaderId)";
    var playList = @Html.Raw(Model.PlayListJson);
    var currentIndex = 0;
    var maxIndex = playList.length - 1;

    var player;
    console.log(playList);

    document.onreadystatechange = function() {
        if (document.readyState === 'complete') {
            console.log('document is complete');
            var tag = document.createElement('script');

            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }
    }


    function onYouTubeIframeAPIReady() {
        console.log("onYouTubeIframeAPIReady!");

        player = new YT.Player('player', {
            height: '360',
            width: '640',
            videoId: playList[currentIndex].itemId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        console.log('onPlayerReady');

        //画面に現在の音量状態を反映
        displayCurrentVolumeStatus();

        playItem(0);
    }

    function onPlayerStateChange(event) {
        console.log('ステータス変更 : ' + event.data);
        if (event.data == 0) {
            console.log('再生終了');

            console.log("次の動画を再生");
            playNextVideo();

        }
        if (event.data == 3) {
            console.log("バッファリング中...");
        }
        if (event.data == -1) {

            console.log("再生未開始のため、再生開始");
            player.playVideo();
        }
    }

    function playNextVideo() {

        var prevIndex = currentIndex;
        var addCountEntityId = playList[prevIndex].itemLibraryId;

        //再生回数を加算
        addPlayCount(addCountEntityId, prevIndex);

        //インデックスを加算
        if (currentIndex === maxIndex) {
            currentIndex = 0;
        } else {
            currentIndex += 1;
        }

        console.log("currentIndex : " + currentIndex);
        playItem(currentIndex);
        //player.loadVideoById(playList[currentIndex].itemId);


    }

    function onPlayListItemClick(sender) {
        console.log("次に再生するID：" + sender.getAttribute("item-itemId"));


        //インデックスを変更
        //currentIndex = parseInt(sender.getAttribute("item-itemSeq"));
        //player.loadVideoById(sender.getAttribute("item-itemId"));

        playItem(parseInt(sender.getAttribute("item-itemSeq")));

    }

    /* 指定した連番のアイテムを再生します。 */
    function playItem(seq) {

        currentIndex = seq;
        let itemId = playList[seq].itemId;

        //指定したIDのYoutubeビデオを再生
        player.loadVideoById(itemId);

        //指定したitem-seqにCSSクラスを付与
        //クラス名から取得
        let aTags = document.getElementsByClassName("playlist-item-a");

        for (var i = 0; i < aTags.length; i++) {

            var itemSeq = aTags[i].getAttribute("item-itemSeq");
            if (itemSeq == seq) {
                //一致
                aTags[i].parentNode.classList.add("playlist-item-playing");
            } else {
                aTags[i].parentNode.classList.remove("playlist-item-playing");
            }

        }


    }

    /* 指定したアイテムの再生回数を加算します。 */
    function addPlayCount(itemLibrariesEntityId, index) {
        //対象のパラメータで再生回数を増やすAPIを呼び出す
        var req = new XMLHttpRequest();

        req.onreadystatechange = function() {
            if (req.readyState == 4) {
                //通信完了
                if (req.status == 200) {
                    console.log("addPlayCount 200OK");
                    console.log("responseText : " + req.responseText);
                    console.log("parsed : " + JSON.parse(req.responseText));
                    document.getElementById("playCount_" + index).innerText = JSON.parse(req.responseText)["playCount"];

                }
            } else {
                console.log("addPlayCount calling...");
            }
        }

        req.open("GET", "/Player/addPlayCount?itemLibrariesEntityId=" + itemLibrariesEntityId);
        req.send(null);

    }



    function onVolumeControlRangeChange() {
        var rangeValue = document.getElementById("volumeControl").value;

        //プレイヤーの音量をセット
        player.setVolume(rangeValue);

        //表示反映
        displayCurrentVolumeStatus();

    }

    /* 現在のプレイヤーの音量の状態を画面に反映します */
    function displayCurrentVolumeStatus() {

        //ミュート状態の表示切り替え
        var isMute = player.isMuted();
        var muteDisplayControl = document.getElementById("current-mute-status");
        if (isMute) {
            muteDisplayControl.style.display = "";
        } else {
            muteDisplayControl.style.display = "none";
        }

        //プレイヤーの音量反映
        var volumeSpan = document.getElementById("current-volume-value");
        var currentVolume = player.getVolume();

        volumeSpan.innerText = currentVolume;
    }
</script>